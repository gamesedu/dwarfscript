{"version":3,"sources":["node_modules/browser-pack/_prelude.js","index.js","lib/directions.js","lib/dom-delegate.js","lib/index.js","lib/maps/index.js","lib/parser/detect-type.js","lib/parser/expression-parser.js","lib/parser/index.js","lib/unit/index.js","lib/unit/modules/index.js","lib/unit/modules/sensor.js","lib/unit/modules/wheels.js","lib/unit/processor.js","lib/view.js","lib/views/main-view.js","lib/views/map.js","node_modules/ak-eventemitter/index.js","node_modules/ak-eventemitter/lib/eventemitter.js","node_modules/ak-template/index.js","node_modules/ak-template/lib/template.js","node_modules/ak-template/node_modules/stluafed/index.js","node_modules/path-browserify/index.js","node_modules/process/browser.js","node_modules/stluafed/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","let Application = require('./lib/index');\nlet application = new Application();\n\napplication.view.on('render', function run () {\n  application.run();\n});\ndocument.body.appendChild(application.view.render().el);\n","let relative = {\n  'ahead': 0,\n  'right': 1,\n  'behind': 2,\n  'left': - 1\n};\nlet absolute = ['north', 'west', 'south', 'east'];\n\nmodule.exports = {\n  'absolute': absolute,\n  'relative': relative,\n  'getAbsoluteFromTurn': (currentDirection, turn) => {\n    let dir = absolute.indexOf(currentDirection);\n    let clock = {\n      'clock': 1,\n      'right': 1,\n      'counter': - 1,\n      'left': - 1\n    };\n\n    dir = ((dir + clock[turn]) % absolute.length + absolute.length) % absolute.length;\n\n    return absolute[dir];\n  },\n  'getAbsoluteFromRelative': (currentDirection, rel) => {\n    let dir = absolute.indexOf(currentDirection);\n\n    if (! relative.hasOwnProperty(rel)) {\n      return rel;\n    }\n\n    dir = ((dir + relative[rel]) % absolute.length + absolute.length) % absolute.length;\n\n    return absolute[dir];\n  },\n  'getNextTileCoordinates': (coordinates, direction) => {\n    let x = coordinates.x;\n    let y = coordinates.y;\n    let movement = {\n      'north': () => {\n        y -= 1;\n      },\n      'west': () => {\n        x += 1;\n      },\n      'south': () => {\n        y += 1;\n      },\n      'east': () => {\n        x -= 1;\n      }\n    };\n\n    movement[direction]();\n\n    return {'x': x, 'y': y};\n  }\n};\n","/**\n * helper\n */\nlet matchAncestorOf = (child, parentSelector, stopAtElement) => {\n  if (! parentSelector) {\n    return stopAtElement;\n  }\n\n  if (! child || child === stopAtElement) {\n    return false;\n  }\n\n  if (child.matches(parentSelector)) {\n    return child;\n  }\n\n  return matchAncestorOf(child.parentElement, parentSelector, stopAtElement);\n};\n\n/**\n * @class DomDelegate\n */\nmodule.exports = class DomDelegate {\n  /**\n   * constructor\n   *\n   * @param {Element} root - root element which will be actually bound\n   */\n  constructor (root) {\n    if (! root) {\n      throw new Error('Missing `root` argument');\n    }\n\n    this.root = root;\n    this.events = {};\n  }\n\n  //The callback has the follow signature:\n  //\n  //```\n  //function callback(domNativeEvent, extraData)\n  //\n  //extraData = {\n  //  'matchedTarget': HTMLElement // this is the element which matches given selector\n  //}\n  //```\n  /**\n   * add listener\n   *\n   * @param {String} event\n   * @param {String} selector\n   * @param {Function} callback\n   * @param {*} [context]\n   * @return {DomDelegate}\n   */\n  on (event, selector, callback, context) {\n    if (typeof selector === 'function') {\n      context = callback;\n      callback = selector;\n      selector = '';\n    }\n\n    if (! callback) {\n      throw new Error('Missing `callback` argument');\n    }\n\n    selector = selector || '';\n    context = context || null;\n\n    let callbacks = this.events[event];\n\n    //We add only one listener per event and then look for matching delegation later\n    if (! callbacks) {\n      callbacks = this.events[event] = [];\n\n      let delegate = this.events[event].delegationCallback = (e) => {\n        this.events[event]\n          .filter((scope) => {\n            return ! scope.selector && e.target === this.root || matchAncestorOf(e.target, scope.selector, this.root);\n          }).forEach((scope) => {\n            let matchedTarget = scope.selector === '' && this.root || matchAncestorOf(e.target, scope.selector, this.root);\n\n            if (scope.context) {\n              return scope.callback.call(scope.context, e, {'matchedTarget': matchedTarget});\n            }\n\n            scope.callback(e, {'matchedTarget': matchedTarget});\n          });\n      };\n\n      this.root.addEventListener(event, delegate, true);\n    }\n\n    callbacks.push({\n      'selector': selector,\n      'callback': callback,\n      'context': context\n    });\n\n    return this;\n  }\n\n  /**\n   * remove event listener\n   *\n   * @param {String} [event]\n   * @param {String} [selector]\n   * @param {Function} [callback]\n   * @param {*} [context]\n   * @return {DomDelegate}\n   */\n  /*eslint complexity: [2, 20]*/\n  off (event, selector, callback, context) {\n    let arity = arguments.length;\n\n    if (typeof selector === 'function') {\n      context = callback;\n      callback = selector;\n      selector = '';\n    }\n\n    selector = selector || '';\n    context = context || null;\n\n    if (arity === 0) {\n      for (event in this.events) {\n        this.root.removeEventListener(event, this.events[event].delegationCallback, true);\n      }\n\n      this.events = {};\n\n      return this;\n    }\n\n    if (! this.events[event]) {\n      return this;\n    }\n\n    if (arity === 1) {\n      this.root.removeEventListener(event, this.events[event].delegationCallback, true);\n\n      delete this.events[event];\n\n      return this;\n    }\n\n    let delegationCallback = this.events[event].delegationCallback;\n\n    this.events[event] = this.events[event].filter((scope) => {\n      return ! (arity === 2 && scope.selector === selector\n        || arity === 3 && scope.selector === selector && scope.callback === callback\n        || arity === 4 && scope.selector === selector && scope.callback === callback && scope.context === context);\n    });\n    this.events[event].delegationCallback = delegationCallback;\n\n    if (! this.events[event].length) {\n      this.root.removeEventListener(event, this.events[event].delegationCallback, true);\n\n      delete this.events[event];\n    }\n\n    return this;\n  }\n\n  /**\n   * destructor\n   */\n  destroy () {\n    this.off();\n\n    this.root = null;\n    this.events = null;\n  }\n};\n","let MainView = require('./views/main-view');\nlet Unit = require('./unit');\nlet parse = require('./parser');\n\nlet maps = require('./maps');\n\nmodule.exports = class Application {\n  constructor () {\n    this.view = new MainView({\n      'map': maps[0]\n    });\n    this.dwarf = new Unit({\n      'type': 'dwarf',\n      'name': 'Gimlet',\n      'modules': [\n        'legs',\n        'sensor'\n      ],\n      'map': this.view.map\n    });\n\n    this.view.on('program.run', this.onProgramRun.bind(this));\n    this.view.on('game.victory', this.onVictory.bind(this));\n    this.dwarf.on('unit.move', this.onUnitMove.bind(this));\n  }\n\n  run () {\n    this.dwarf.position = {'x': 1, 'y': 2};\n    this.view.map.drawUnit(this.dwarf);\n  }\n\n  onProgramRun (e, code) {\n    if (this.dwarf.processor.running) {\n      this.dwarf.processor.running = false;\n      this.view.runButton.innerHTML = 'RUN';\n      this.view.runButton.classList.remove('ds-execution-stop');\n      return;\n    }\n\n    let program = parse(code);\n\n    if (program.status === 'ok') {\n      this.dwarf.run(program.tree);\n      this.view.runButton.innerHTML = 'STOP';\n      this.view.runButton.classList.add('ds-execution-stop');\n    }\n    this.view.renderParsingLog(program.log);\n  }\n\n  onVictory () {\n    /* eslint-disable no-alert */\n    this.onProgramRun();\n    alert('Wow congrats you won !!');\n  }\n\n  onUnitMove (e, unit, coordinates) {\n    this.view.map.moveUnit(unit, coordinates);\n  }\n};\n","module.exports = [\n  `\nWWWWWWWWWWWWWWW\nW_W_____W____WW\nW_W_W_W___WW__W\nW___W_WWWWWWW_W\nWWWWW__WW___W_W\nW___WW_W__W___W\nW_W____W_WWWWWW\nW_WWWWWW______W\nW__W_____WWWW_W\nW_WWWWWW___W__W\nW_W____WWWWW_WW\nW_W_WW_W___W__W\nW_W_WWWW_W_WW_W\nW____WV__W____W\nWWWWWWWWWWWWWWW\n`,\n  `ABBBBBBBBBBBC\nDEEEEEEEEEEEF\nG___________I\nG___MN______I\nG___OP______I\nG___QR______I\nG___ST______I\nG___________I\nG_______MN__I\nG_______IG__I\nJKKKKKKKVUKKL`\n];\n","module.exports = function detectType (line) {\n  let patterns = {\n    'if': /^if\\([a-zA-z0-9 .+\\-*/!='\\(\\)]{0,}\\)\\{$/,\n    'assign': /=/,\n    'call': /\\([a-zA-z0-9, +\\-*/='\\(\\)]{0,}\\)$/,\n    'closingBracket': /^}$/,\n    'string': /'[a-zA-z0-9, +\\-*/='\\(\\)]{0,}'/\n  };\n\n  for (let key in patterns) {\n    if (line.match(patterns[key])) {\n      return {'type': key, 'status': 'ok'};\n    }\n  }\n\n  return {'type': 'unknown', 'status': 'error'};\n};\n","let detectType = require('./detect-type');\n\nlet booleanOperators = {\n  '==': 'equals',\n  '!=': 'notequals'\n};\n\nlet expressionParser = module.exports = {\n  'if': (line) => {\n    let info = {};\n    let start = line.indexOf('(') + 1;\n    let end = line.lastIndexOf(')');\n    let exp = line.substring(start, end);\n    //let exp = line.match(/\\([a-zA-z0-9 +\\-*/='\\(\\)]{0,}\\)/g)[0];\n\n    info.condition = expressionParser.boolean(exp);\n    info.type = 'if';\n\n    return info;\n  },\n  'call': (line) => {\n    let info = {};\n    let start = line.indexOf('(') + 1;\n    let end = line.lastIndexOf(')');\n    let paren = line.substring(start, end);\n    //let paren = line.match(/\\([a-zA-z0-9, +\\-*/='\\(\\)]{0,}\\)/g)[0];\n    let methodName = line.split('(')[0];\n\n    info.method = methodName.split('.');\n    info.arguments = [];\n    info.type = 'call';\n\n    if (paren.length) {\n      let args = paren.split(',');\n\n      for (let i = 0, len = args.length; i < len; i += 1) {\n        info.arguments.push(quickParse(args[i]));\n      }\n    }\n\n    return info;\n  },\n  'assign': (line) => {\n    let info = {};\n    let splitLine = line.split('=');\n\n    info.variable = splitLine[0];\n    info.value = splitLine[1];\n    info.type = 'assign';\n\n    return info;\n  },\n  'string': (line) => {\n    let info = {};\n    let quotes = line.match(/'[a-zA-z0-9 +\\-*/='\\(\\)]{0,}'/g)[0];\n\n    info.type = 'string';\n    info.value = quotes.substring(1, quotes.length - 1);\n\n    return info;\n  },\n  'boolean': (line) => {\n    let info = {};\n    let operator = '';\n\n    for (let key in booleanOperators) {\n      if (line.match(key)) {\n        operator = key;\n      }\n    }\n\n    line = line.split(operator);\n\n    info.operator = booleanOperators[operator];\n    info.a = quickParse(line[0]);\n    info.b = quickParse(line[1]);\n    info.type = 'boolean';\n\n    return info;\n  }\n};\n\nfunction quickParse (exp) {\n  let type = detectType(exp);\n\n  if (type.status === 'error') {\n    throw new Error(`couldnt determine type of ${exp}`);\n  }\n\n  return expressionParser[type.type](exp);\n}\n","let expressionParser = require('./expression-parser');\nlet detectType = require('./detect-type');\n\nmodule.exports = function parse (code) {\n  let program = {\n    'log': [],\n    'status': 'ok',\n    'tree': [],\n    'weight': 0\n  };\n\n  let recursionsCount = 0;\n\n  // code = normalizeCode(code);\n\n  let lines = code.split('\\n');\n\n  program.tree = clip (0, lines.length);\n\n  function clip (start, end) {\n    recursionsCount += 1;\n\n    if (recursionsCount > 200) {\n      logError(start, 'Parser error: Too many recursions');\n      return [];\n    }\n\n    let tree = [];\n\n    for (let i = start; i < end; i += 1) {\n      let line = lines[i].replace(/ /g, '');\n\n      if (line.length === 0) {\n        continue;\n      }\n\n      let lineType = detectType(line);\n\n      if (lineType.status === 'error') {\n        logError(i, 'Parser error: Could not determine line type');\n        return [];\n      }\n\n      lineType = lineType.type;\n\n      if (lineType === 'closingBracket') {\n        continue;\n      }\n\n      let operation = {\n        'type': lineType,\n        'raw': line,\n        'subTree': []\n      };\n      let lineInfo = expressionParser[lineType](line);\n\n      for (let key in lineInfo) {\n        operation[key] = lineInfo[key];\n      }\n\n      if (lineType === 'if') {\n        let endif = findClosingBracket (i, end);\n        let restartAt = endif;\n\n        if (endif === 'error') {\n          logError(i, 'Parser error: could not find matching closing bracket');\n          return [];\n        }\n\n        operation.subTree = clip(i + 1, endif);\n\n        //We check the next line if there is a if\n        let nextLine = lines[endif + 1];\n\n        nextLine = nextLine.replace(/ /g, '');\n\n        if (nextLine.match(/^else\\{$/)) {\n          let endelse = findClosingBracket (endif + 1, end);\n\n          operation.elseTree = clip(endif + 2, endelse);\n\n          restartAt = endelse;\n        }\n\n        i = restartAt;\n      }\n\n      tree.push(operation);\n      program.weight += 1;\n    }\n\n    return tree;\n  }\n\n  function findClosingBracket (start, end) {\n    let bracketCounter = 0;\n\n    for (let i = start; i <= end; i += 1) {\n      let line = lines[i];\n\n      if (line.match(/\\{/)) {\n        bracketCounter += 1;\n      }\n      if (line.match(/\\}/)) {\n        bracketCounter -= 1;\n      }\n      if (bracketCounter === 0) {\n        return i;\n      }\n    }\n\n    return 'error';\n  }\n\n  function logError (line, message) {\n    program.log.push({\n      'line': line,\n      'message': message\n    });\n    program.status = 'error';\n  }\n\n  return program;\n};\n\n// function normalizeCode (rawCode) {\n//   let normalizedCode = '';\n//\n//   normalizedCode = rawCode.replace(/\\n\\s*}\\s*else\\s*{\\s*\\n/g, '\\n}\\nelse {\\n');\n//\n//   return normalizedCode;\n// }\n","let fs = require('fs');\nlet path = require('path');\nlet template = require('ak-template');\nlet defaults = require('stluafed');\n\nlet View = require('../view');\nlet Processor = require('./processor');\n\nlet modules = require('./modules');\n\n// http://spritespace.blogspot.fr/2013/10/to-start-of-with-here-are-collection-of.html\n// http://game-icons.net/\n// http://opengameart.org/sites/default/files/dungeon_pre.png + http://opengameart.org/sites/default/files/dungeon_tiles_2.png\n// http://opengameart.org/content/a-blocky-dungeon\n\nmodule.exports = class Unit extends View {\n  constructor (options = {}) {\n    super(options);\n\n    this.template = template(fs.readFileSync(path.join(__dirname, '../templates/unit.tpl'), 'utf-8'));\n    this.options = defaults(options, {\n      'events': [\n      ],\n      'type': 'robot',\n      'name': 'anonymous',\n      'direction': 'west',\n      'fuel': 10,\n      'modules': [\n        'wheels'\n      ]\n    });\n\n    this.map = options.map;\n    this.programContext = {};\n    this.processor = new Processor({\n      'parent': this\n    });\n\n    for (let moduleName of this.options.modules) {\n      this.addModule(moduleName);\n    }\n  }\n\n  run (program) {\n    this.processor.run(program);\n  }\n\n  render () {\n    this.emit('rendering');\n    this.renderTemplate(this.options);\n    this.emit('render');\n\n    return this;\n  }\n\n  addModule (module) {\n    if (! modules[module]) {\n      throw new Error(`Could not find module \"${module}\"`);\n    }\n\n    this[module] = modules[module](this);\n  }\n\n  useFuel (amt = 1) {\n    if (this.type === 'robot') {\n      this.fuel -= amt;\n    }\n  }\n  get fuel () {\n    return this.options.fuel;\n  }\n\n  set direction (direction) {\n    this.options.direction = direction;\n  }\n  get direction () {\n    return this.options.direction;\n  }\n  set name (name) {\n    throw new Error(`Attempting to assign ${name} to name which is a read only property`);\n  }\n  get name () {\n    return this.options.name;\n  }\n  set type (type) {\n    throw new Error(`Attempting to assign ${type} to type which is a read only property`);\n  }\n  get type () {\n    return this.options.type;\n  }\n};\n","module.exports = {\n  'legs': require('./wheels'),\n  'wheels': require('./wheels'),\n  'sensor': require('./sensor')\n};\n","let directions = require('../../directions');\n\nmodule.exports = function sensor (parent) {\n  //let scanRange = 1;\n  let info = {\n    'general': {\n      'status': 'ok'\n    },\n    'scan': {\n      'duration': 20\n    }\n  };\n\n  return {\n    'info': (infoName) => {\n      return info[infoName];\n    },\n    'scan': (direction = 'ahead') => {\n      let absoluteDirection = directions.getAbsoluteFromRelative(parent.direction, direction);\n      let lookAt = directions.getNextTileCoordinates(parent.position, absoluteDirection);\n      let tile = parent.map.selectTile(lookAt);\n\n      if (! tile || tile.type === 'wall') {\n        return 'obstacle';\n      }\n\n      return 'clear';\n    }\n  };\n};\n","let directions = require('../../directions');\n\nmodule.exports = function wheels (parent) {\n  let info = {\n    'general': {\n      'status': 'ok'\n    },\n    'turn': {\n      'duration': 150\n    },\n    'forward': {\n      'duration': 300\n    }\n  };\n\n  return {\n    'info': (infoName) => {\n      return info[infoName];\n    },\n    'turn': function turn (direction = 'clock') {\n      for (let i = 0, len = directions.absolute.length; i < len; i += 1) {\n        parent.el.classList.remove(`ds-direction-${directions.absolute[i]}`);\n      }\n\n      parent.direction = directions.getAbsoluteFromTurn(parent.direction, direction);\n      parent.el.classList.add(`ds-direction-${parent.direction}`);\n\n      return parent;\n    },\n    'forward': function forward () {\n      let newCoordinates = directions.getNextTileCoordinates(parent.position, parent.direction);\n\n      if (parent.fuel <= 0) {\n        parent.log(`${parent.name} the ${parent.type} has no more fuel.`);\n        return;\n      }\n\n      parent.useFuel();\n      parent.emit('unit.move', parent, newCoordinates);\n    }\n  };\n};\n","module.exports = class Processor {\n  constructor (options = {}) {\n    this.parent = options.parent;\n    this.executionLog = [];\n  }\n\n  run (program) {\n    let i = 0;\n\n    if (! this.running) {\n      this.running = true;\n\n      this.log('Program starting from the top');\n\n      this.nextLine(program, i, () => {\n        this.running = false;\n        this.run(program);\n      });\n    }\n  }\n\n  nextLine (program, i, callback) {\n    if (! this.running) {\n      return;\n    }\n\n    let line = program[i];\n    let lineType = line.type;\n    let last = i + 1 === program.length;\n\n    let nextContent = this.nextLine.bind(this, program, i + 1, callback);\n\n    if (last) {\n      nextContent = callback;\n    }\n\n    let next = function next (delay = 0) {\n      setTimeout(function exec () {\n        nextContent();\n      }, delay);\n    };\n\n    if (lineType === 'assign') {\n      //this[program[i]] && this[program[i]]();\n      next();\n    }\n    if (lineType === 'if') {\n      if (this.testCondition(line.condition)) {\n        this.nextLine(line.subTree, 0, next);\n      } else if (line.elseTree) {\n        this.nextLine(line.elseTree, 0, next);\n      } else {\n        next();\n      }\n    }\n    if (lineType === 'call') {\n      let methodInfo = this.execCall(program[i]);\n\n      next(methodInfo.info.duration);\n    }\n  }\n\n  execCall (call) {\n    let methodPath = call.method;\n    let methodInfo = {};\n    let methodContext = 'programContext';\n    let methodName = '';\n    let parameters = [];\n\n    if (methodPath.length === 1) {\n      methodName = methodPath[0];\n    }\n    if (methodPath.length === 2) {\n      methodContext = methodPath[0];\n      methodName = methodPath[1];\n    }\n\n    if (! this.parent[methodContext] || ! this.parent[methodContext][methodName]) {\n      throw new Error(`${this.parent.name} the ${this.parent.type} cannot run \"${methodPath.join('.')}(${parameters})\"`);\n    }\n\n    for (let i = 0, len = call.arguments.length; i < len; i += 1) {\n      parameters.push(this.getArgumentValue(call.arguments[i]));\n    }\n\n    //get info from module\n    methodInfo = this.parent[methodContext].info && this.parent[methodContext].info(methodName);\n\n    return {\n      'return': this.parent[methodContext][methodName].apply(this.parent, parameters),\n      'info': methodInfo\n    };\n  }\n\n  testCondition (condition) {\n    if (condition.operator === 'equals') {\n      return this.getArgumentValue(condition.a) === this.getArgumentValue(condition.b);\n    }\n    if (condition.operator === 'notequals') {\n      return this.getArgumentValue(condition.a) !== this.getArgumentValue(condition.b);\n    }\n    return false;\n  }\n\n  getArgumentValue (arg) {\n    if (arg.type === 'string') {\n      return arg.value;\n    }\n    if (arg.type === 'call') {\n      let value = this.execCall(arg);\n\n      return value.return;\n    }\n\n    return false;\n  }\n\n  log (text) {\n    /* eslint-disable no-console */\n    console.log(text);\n    this.executionLog.push(text);\n  }\n};\n","let EventEmitter = require('ak-eventemitter');\nlet DomDelegate = require('./dom-delegate');\n\nmodule.exports = class View extends EventEmitter {\n  constructor (options = {}) {\n    super(options);\n\n    this.events = {};\n    this.element = null;\n    this.delegate = null;\n    this.options = options;\n  }\n\n  /**\n   * view's main DOM element\n   *\n   * @return {Element}\n   */\n  get el () {\n    return this.element;\n  }\n\n  /**\n   * bind events to the view's main DOM element\n   *\n   * @throws Error - if view has not been rendered\n   *\n   * @param {Array<ViewEvent>} [events]\n   * @return {View}\n   */\n  bind (events = this.options.events) {\n    if (! this.element) {\n      throw new Error('View has not been rendered yet.');\n    }\n\n    if (! events) {\n      return this;\n    }\n\n    //Will try to unbind events first, to avoid duplicates\n    this.unbind(events);\n    this.handleEvents('on', events);\n\n    return this;\n  }\n\n  /**\n   * unbind events from the view's main DOM element\n   *\n   * @throws Error - if view has not been rendered\n   *\n   * @param {Array<ViewEvent>} [events]\n   * @return {View}\n   */\n  unbind (events = this.options.events) {\n    if (! this.element) {\n      throw new Error('View has not been rendered yet.');\n    }\n\n    if (! events) {\n      this.delegate.off();\n\n      return this;\n    }\n\n    this.handleEvents('off', events);\n\n    return this;\n  }\n\n  /**\n   * Template rendering\n   *\n   * @param  {Object} data - data to display\n   * @return {WidgetView}\n   */\n  renderTemplate (data) {\n    //Will always unbind before rendering if main element is already set.\n    if (this.element) {\n      this.unbind();\n      this.delegate.destroy();\n    }\n\n    if (! this.template) {\n      throw new Error('Missing `this.template`');\n    }\n\n    //Only takes the first child element of the template.\n    this.element = this.domify(this.template(data || {}));\n    this.delegate = new DomDelegate(this.element);\n\n    this.bind();\n\n    return this;\n  }\n\n  /**\n   * render the template (proxy for `#renderTemplate()`)\n   *\n   * @see #renderTemplate()\n   * @event rendering - before rendering\n   * @event render - after render\n   *\n   * @return {View}\n   */\n  render () {\n    this.emit('rendering');\n    this.renderTemplate.apply(this, arguments);\n    this.emit('render');\n\n    return this;\n  }\n\n  domify (str) {\n    let div = document.createElement('div');\n\n    div.innerHTML = str;\n\n    return div.firstElementChild;\n  }\n\n  handleEvents (action, events) {\n    let event;\n    let selector;\n    let callback;\n    let context;\n    let scope;\n\n    for (let i = 0, len = events.length; i < len; i += 1) {\n      scope = events[i];\n      event = scope[0];\n      selector = scope[2] ? scope[1] : null;\n      callback = scope[2] ? scope[2] : scope[1];\n      context = null;\n\n      if (typeof callback !== 'function' && typeof this[callback] === 'function') {\n        callback = this[callback];\n        /*eslint consistent-this: 0*/\n        context = this;\n      }\n\n      if (typeof callback !== 'function') {\n        throw new Error('Invalid callback for event [' + event + ', ' + selector + ', ' + callback);\n      }\n\n      if (! selector) {\n        this.delegate[action](event, '', callback, context);\n\n        continue;\n      }\n\n      selector = Array.isArray(selector) ? selector : [selector];\n\n      for (let j = 0; j < selector.length; j += 1) {\n        this.delegate[action](event, selector[j], callback, context);\n      }\n    }\n  }\n};\n","let fs = require('fs');\nlet path = require('path');\nlet template = require('ak-template');\nlet defaults = require('stluafed');\n\nlet View = require('../view');\nlet Map = require('./map');\n\nmodule.exports = class MainView extends View {\n  constructor (options = {}) {\n    super(options);\n\n    this.template = template(fs.readFileSync(path.join(__dirname, '../templates/main-view.tpl'), 'utf-8'));\n    this.lineNumberTemplate = template(fs.readFileSync(path.join(__dirname, '../templates/line-number.tpl'), 'utf-8'));\n    this.options = defaults(options, {\n      'events': [\n        ['click', '.ds-run', 'onRunClick'],\n        ['keypress', '#ds-editor-input', 'onEnter']\n      ]\n    });\n\n    this.map = new Map({\n      'map': this.options.map\n    });\n\n    this.map.on('map.walk.victory', () => {\n      this.emit('game.victory');\n    });\n  }\n\n  render () {\n    this.emit('rendering');\n    this.renderTemplate.apply(this, arguments);\n\n    let mapPanel = this.el.querySelector('#ds-map-panel');\n\n    mapPanel.appendChild(this.map.render().el);\n\n    this.runButton = this.el.querySelector('.ds-run');\n    this.editor = {\n      'numbers': this.el.querySelector('#ds-editor-line-numbers'),\n      'input': this.el.querySelector('#ds-editor-input')\n    };\n\n    this.editor.input.value = `if (sensor.scan('right') == 'clear') {\n legs.turn('right')\n}\nif (sensor.scan('ahead') == 'clear') {\n legs.forward()\n}\nelse {\n if(sensor.scan('left') == 'clear') {\n  legs.turn('left')\n }\n else {\n  legs.turn('right')\n }\n}\n`;\n\n    this.onEnter();\n\n    this.emit('render');\n\n    return this;\n  }\n\n  renderParsingLog (log) {\n    let lineNumbers = this.el.querySelectorAll('.ds-editor-line-number');\n\n    for (let i = 0, len = lineNumbers.length; i < len; i += 1) {\n      lineNumbers[i].classList.remove('ds-parsing-error');\n    }\n\n    for (let i = 0, len = log.length; i < len; i += 1) {\n      let displayedNumber = log[i].line + 1;\n      let lineNumber = this.el.querySelector(`.ds-editor-line-number[data-line-number=\"${displayedNumber}\"]`);\n\n      if (! lineNumber) {\n        return;\n      }\n\n      lineNumber.classList.add('ds-parsing-error');\n      lineNumber.title = log[i].message;\n    }\n  }\n\n  onRunClick () {\n    let rawCode = this.editor.input.value;\n\n    this.emit('program.run', rawCode);\n  }\n\n  onEnter () {\n    let lineCount = this.editor.input.value.split('\\n').length;\n    let lineNumbersHtml = '';\n\n    for (let i = 1; i <= lineCount + 1; i += 1) {\n      lineNumbersHtml += this.lineNumberTemplate({'number': i});\n    }\n\n    this.editor.input.rows = lineCount + 3;\n    this.editor.numbers.innerHTML = lineNumbersHtml;\n  }\n};\n","let fs = require('fs');\nlet path = require('path');\nlet template = require('ak-template');\nlet defaults = require('stluafed');\n\nlet View = require('../view');\n\nlet maps = require('../maps');\n\nmodule.exports = class Map extends View {\n  constructor (options = {}) {\n    super(options);\n\n    this.template = template(fs.readFileSync(path.join(__dirname, '../templates/map.tpl'), 'utf-8'));\n    this.mapTileTemplate = template(fs.readFileSync(path.join(__dirname, '../templates/map-tile.tpl'), 'utf-8'));\n\n    this.options = defaults(options, {\n      'events': [],\n      'map': maps[0]\n    });\n\n    this.map = this.initMap(options.map);\n  }\n\n  render () {\n    this.emit('rendering');\n    this.renderTemplate.apply(this, arguments);\n\n    let mapHtml = '';\n\n    for (let y = 0; y < this.map.length; y += 1) {\n      for (let x = 0; x < this.map[y].length; x += 1) {\n        mapHtml += this.mapTileTemplate(this.map[y][x]);\n      }\n    }\n\n    this.el.innerHTML = mapHtml;\n    this.saveTileElements();\n\n    this.emit('render');\n\n    return this;\n  }\n\n  initMap (plan) {\n    let map = [];\n\n    plan = plan.split('\\n');\n\n    for (let y = 0, ylen = plan.length; y < ylen; y += 1) {\n      let row = plan[y].split('');\n\n      map.push([]);\n\n      for (let x = 0, xlen = row.length; x < xlen; x += 1) {\n        let tile = {\n          'x': x,\n          'y': y,\n          'type': 'floor'\n        };\n\n        if (plan[y][x] === 'W') {\n          tile.type = 'wall';\n          tile.imgClass = plan[y][x];\n        }\n        if (plan[y][x] === 'V') {\n          tile.type = 'victory';\n          tile.imgClass = 'victory';\n        }\n\n        map[y].push(tile);\n      }\n    }\n\n    return map;\n  }\n  saveTileElements () {\n    for (let y = 0; y < this.map.length; y += 1) {\n      for (let x = 0; x < this.map[y].length; x += 1) {\n        let selector = `.ds-map-tile[data-position-x=\"${x}\"][data-position-y=\"${y}\"]`;\n\n        this.map[y][x].el = this.el.querySelector(selector);\n      }\n    }\n  }\n  selectTile (coordinates) {\n    if (! coordinates) {\n      throw new Error('No coordinates provided for selectTile');\n    }\n    let result = null;\n\n    result = this.map[coordinates.y] && this.map[coordinates.y][coordinates.x];\n\n    return result;\n  }\n  drawUnit (unit) {\n    let tile = this.selectTile(unit.position);\n\n    if (unit.el) {\n      unit.el.parentElement.removeChild(unit.el);\n    }\n    if (! unit.el) {\n      unit.render();\n    }\n\n    tile.el.appendChild(unit.el);\n  }\n\n  moveUnit (unit, coordinates) {\n    let tile = this.selectTile(coordinates);\n\n    if (tile && tile.type !== 'wall') {\n      unit.position = coordinates;\n      this.drawUnit(unit);\n\n      if (tile.type === 'victory') {\n        this.emit('map.walk.victory');\n      }\n      return;\n    }\n    unit.processor.log('move disallowed');\n  }\n};\n","module.exports = require('./lib/eventemitter');\n","'use strict';\n\n/**\n * Export `EventEmitter`\n *\n * @param {Object} options (optional)\n * @return {EventEmitter}\n */\nvar EventEmitter = module.exports = function (options) {\n  options = options || {};\n  this._eventEmitter = {};\n  this._eventEmitter.tree = {'children': {}};\n  this._eventEmitter.delimiter = options.delimiter || '.';\n};\n\n/**\n * Call all callbacks for given tree\n *\n * @see #_searchTree();\n *\n * @param {Object} tree\n * @param {arguments} args\n */\nEventEmitter.prototype._emit = function (tree, args) {\n  var callbacks = tree.callbacks;\n\n  if (! callbacks) {\n    return this;\n  }\n\n  var argc = args.length;\n\n  for (\n    var i = 0,\n    len = callbacks.length,\n    callback;\n    i < len;\n    i += 1\n  ) {\n    callback = callbacks[i];\n\n    if (argc === 1) {\n      callback.fn.call(callback.context, args[0]);\n    } else if (argc === 2) {\n      callback.fn.call(callback.context, args[0], args[1]);\n    } else {\n      callback.fn.apply(callback.context, args);\n    }\n\n    if (callback.once) {\n      callbacks.splice(i, 1);\n\n      i -= 1;\n      len -= 1;\n\n      if (callbacks.length === 0) {\n        tree.callbacks = undefined;\n      }\n    }\n  }\n};\n\n/**\n * Parse given tree for given ns\n *\n * @see #emit();\n *\n * @param {Object} tree\n * @param {Array} ns\n * @param {Integer} start\n * @param {arguments} args\n */\nEventEmitter.prototype._searchTree = function (tree, ns, start, args) {\n  for (var i = start,\n    len = ns.length,\n    currentNs,\n    currentTree,\n    wildTree;\n    i < len;\n    i += 1\n  ) {\n    wildTree = tree.children['*'];\n\n    if (wildTree) {\n      if (wildTree.callbacks) {\n        this._emit(wildTree, args);\n      }\n\n      this._searchTree(wildTree, ns, i + 1, args);\n    }\n\n    currentNs = ns[i];\n    currentTree = tree.children[currentNs];\n\n    if (! currentTree) {\n      return this;\n    }\n\n    tree = currentTree;\n  }\n\n  if (currentTree) {\n    this._emit(currentTree, args);\n  }\n};\n\n/**\n * Add event listener\n *\n * @param {String} ns\n * @param {Function} callback\n * @param {Object} options (optional)\n * @return {EventEmitter}\n */\nEventEmitter.prototype.on = function (ns, callback, context, once) {\n  ns = ns.split(this._eventEmitter.delimiter);\n  var tree = this._eventEmitter.tree;\n  var currentNs;\n  var currentTree;\n\n  for (var i = 0, len = ns.length; i < len; i += 1) {\n    currentNs = ns[i];\n    currentTree = tree.children[currentNs];\n\n    if (! currentTree) {\n      currentTree = tree.children[currentNs] = {'children': {}};\n    }\n\n    tree = currentTree;\n  }\n\n  if (! tree.callbacks) {\n    tree.callbacks = [];\n  }\n\n  tree.callbacks.push({\n    'fn': callback,\n    'context': context ? context : this,\n    'once': !! once\n  });\n\n  return this;\n};\n\n/**\n * Remove event listener\n *\n * @param {String} ns\n * @param {Function} callback\n * @param {Object} options (optional)\n * @return {EventEmitter}\n */\nEventEmitter.prototype.off = function (ns, callback, context) {\n  if (! ns) {\n    this._eventEmitter.tree = {'children': {}};\n\n    return this;\n  }\n\n  ns = ns.split(this._eventEmitter.delimiter);\n  var tree = this._eventEmitter.tree;\n  var currentTree;\n\n  for (var i = 0, len = ns.length; i < len; i += 1) {\n    currentTree = tree.children[ns[i]];\n\n    if (! currentTree) {\n      return this;\n    }\n\n    tree = currentTree;\n  }\n\n  if (! callback) {\n    tree.callbacks = undefined;\n\n    return this;\n  }\n\n  if (! tree.callbacks) {\n    return this;\n  }\n\n  for (\n    var i2 = 0,\n    callbacks = tree.callbacks,\n    len2 = callbacks.length,\n    currentCallback;\n    i2 < len2;\n    i2 += 1\n  ) {\n    currentCallback = callbacks[i2];\n\n    if (currentCallback.fn === callback) {\n      if (context && context !== currentCallback.context) {\n        continue;\n      }\n\n      callbacks.splice(i2, 1);\n\n      break;\n    }\n  }\n\n  if (! callbacks.length) {\n    tree.callbacks = undefined;\n  }\n\n  return this;\n};\n\n/**\n * Emit event\n *\n * @param {String} ns\n * @param {*} ... (optional)\n * @return {EventEmitter}\n */\nEventEmitter.prototype.emit = function (ns) {\n  ns = ns.split(this._eventEmitter.delimiter);\n\n  this._searchTree(this._eventEmitter.tree, ns, 0, arguments);\n\n  return this;\n};\n\n/**\n * Add event listener for once\n *\n * @param {String} ns\n * @param {Function} callback\n * @param {Object} options (optional)\n * @return {EventEmitter}\n */\nEventEmitter.prototype.once = function (ns, callback, context) {\n  this.on(ns, callback, context, true);\n\n  return this;\n};\n","module.exports = require('./lib/template');\n","'use strict';\n\n/**\n * Dependencies\n */\nvar defaults = require('stluafed');\n\n/**\n * Export `template`\n *\n * @param {String} str\n * @return {Function}\n */\nvar template = module.exports = function (str) {\n  var tpl = template.cache[str];\n\n  if (tpl) {\n    return tpl;\n  }\n\n  /*jshint evil: true*/\n  tpl = (new Function(\n    'locals',\n    'locals = this.defaults(locals || {}, this.globals);' +\n    'var __p = [];' +\n    '__p.push(\\'' +\n    str.replace(/[\\r\\t\\n]/g, ' ')\n      .replace(/'(?=[^%]*%>)/g, '\\t')\n      .split('\\'').join('\\\\\\'')\n      .split('\\t').join('\\'')\n      .replace(/<%=(.+?)%>/g, '\\',$1,\\'')\n      .replace(/<%-(.+?)%>/g, '\\',this.escape($1),\\'')\n      .split('<%').join('\\');')\n      .split('%>').join('__p.push(\\'') +\n    '\\');return __p.join(\\'\\');'\n  )).bind({\n    'defaults': defaults,\n    'globals': template.globals,\n    'escape': template.escape\n  });\n  /*jshint evil: false*/\n\n  template.cache[str] = tpl;\n\n  return tpl;\n};\n\n/**\n * Globals are merged into `locals`\n */\ntemplate.globals = {};\n\n/**\n * Cache\n */\ntemplate.cache = {};\n\n/**\n * Escape function for <%- variable %>, can be overridden (default escape HTML)\n *\n * @param {String} str\n * @return {Function}\n */\ntemplate.escape = function (str) {\n  return (str + '')\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39');\n};\n","'use strict';\n\n/**\n * Merge default values.\n *\n * @param {Object} dest\n * @param {Object} defaults\n * @return {Object}\n * @api public\n */\nvar defaults = function (dest, src, recursive) {\n  for (var prop in src) {\n    if (recursive && dest[prop] instanceof Object && src[prop] instanceof Object) {\n      dest[prop] = defaults(dest[prop], src[prop], true);\n    } else if (! (prop in dest)) {\n      dest[prop] = src[prop];\n    }\n  }\n\n  return dest;\n};\n\n/**\n * Expose `defaults`.\n */\nmodule.exports = defaults;\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","'use strict';\n\n/**\n * Merge default values.\n *\n * @param {Object} dest destination object\n * @param {Object} src source object\n * @param {Boolean} recursive merge into destination recursively (default: false)\n * @return {Object} dest object\n */\nvar defaults = function (dest, src, recursive) {\n  for (var prop in src) {\n    if (! src.hasOwnProperty(prop)) {\n      continue;\n    }\n\n    if (recursive && dest[prop] instanceof Object && src[prop] instanceof Object) {\n      dest[prop] = defaults(dest[prop], src[prop], true);\n    } else if (! (prop in dest)) {\n      dest[prop] = src[prop];\n    }\n  }\n\n  return dest;\n};\n\n/**\n * Expose `defaults`.\n */\nmodule.exports = defaults;\n"],"preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}